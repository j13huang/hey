type Query {
  """posts"""
  allPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

"""post"""
type Post implements Node {
  """The ID of an object"""
  id: ID!

  """title"""
  title: String!

  """body"""
  body: String!

  """link (optional)"""
  link: String
  user: User!

  """Comments for a post"""
  comments(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CommentConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""user"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """name"""
  name: String!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  count: Int!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

"""comment"""
type Comment implements Node {
  """The ID of an object"""
  id: ID!

  """user"""
  user: User!

  """body"""
  body: String!

  """parent, if null then it's a root level"""
  parent: Comment

  """children comments"""
  children: Comment!
}

type Mutation {
  newPost(input: NewPostInput!): NewPostPayload
}

type NewPostPayload {
  post: Post
  allPosts: PostConnection
  clientMutationId: String
}

input NewPostInput {
  title: String!
  body: String!
  userId: String!
  clientMutationId: String
}
