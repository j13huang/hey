type Query {
  """posts"""
  allPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

"""post"""
type Post implements Node & Voteable {
  """The ID of an object"""
  id: ID!

  """title"""
  title: String!

  """body"""
  body: String!

  """link (optional)"""
  link: String
  user: User!
  votes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): VoteConnection!

  """Comments for a post"""
  comments(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CommentConnection!

  """Comments for a post"""
  commentTree(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CommentConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""voteable entity"""
interface Voteable {
  votes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): VoteConnection!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  voteScore: Int!

  """check if there is a positive vote value with the input userId"""
  userVoteValue: Int!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge"""
  node: Vote

  """A cursor for use in pagination"""
  cursor: String!
}

"""vote"""
type Vote implements Node {
  """The ID of an object"""
  id: ID!
  user: User!

  """related post"""
  post: Post

  """related comment"""
  comment: Comment

  """vote value (1 or -1)"""
  value: Int!
}

"""user"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """name"""
  name: String!
}

"""comment"""
type Comment implements Node & Voteable {
  """The ID of an object"""
  id: ID!

  """user"""
  user: User!

  """body"""
  body: String!

  """associated post"""
  post: Post!

  """parent, if null then it's a root level"""
  parent: Comment
  depth: Int!

  """children comments"""
  children(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CommentConnection!
  votes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): VoteConnection!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  commentCount: Int!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  newPost(input: NewPostInput!): NewPostPayload
  newComment(input: NewCommentInput!): NewCommentPayload
  setVote(input: SetVoteInput!): SetVotePayload
  removeVote(input: RemoveVoteInput!): RemoveVotePayload
}

type NewPostPayload {
  postId: ID!
  postEdge: PostEdge
  clientMutationId: String
}

input NewPostInput {
  title: String!
  body: String!
  clientMutationId: String
}

type NewCommentPayload {
  commentEdge: CommentEdge
  clientMutationId: String
}

input NewCommentInput {
  postId: ID!
  parentId: ID
  body: String!
  clientMutationId: String
}

type SetVotePayload {
  voteScore: Int!
  userVoteValue: Int!

  """if vote edge is null, then an existing vote got its value changed"""
  voteEdge: VoteEdge
  clientMutationId: String
}

input SetVoteInput {
  postId: ID
  commentId: ID

  """1 or -1"""
  value: Int!
  clientMutationId: String
}

type RemoveVotePayload {
  deletedVoteId: ID!
  voteScore: Int!
  userVoteValue: Int!
  clientMutationId: String
}

input RemoveVoteInput {
  postId: String
  commentId: String
  clientMutationId: String
}